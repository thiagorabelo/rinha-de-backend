"""
Django settings for rinha_de_backend project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import socket

from pathlib import Path
from dotenv import load_dotenv


load_dotenv(dotenv_path=".env.local")


try:
    MY_HOST_NAME = socket.gethostname()
except Exception as ex:
    MY_HOST_NAME = 'Unknow'


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-@rokcdlwy%t!6fht*2nuc8j$-%t3b#^!$*2t7u+3l)smcgp8zf")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.getenv("DEBUG", "1")))

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")


# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    # 'django.contrib.contenttypes',
    # 'django.contrib.sessions',
    # 'django.contrib.messages',
    # 'django.contrib.staticfiles',

    'pessoas',
]

MIDDLEWARE = [
    # 'django.middleware.security.SecurityMiddleware',
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if bool(int(os.getenv("CPROFILE_MIDDLEWARE", "0"))) and DEBUG:
    MIDDLEWARE += ['django_cprofile_middleware.middleware.ProfilerMiddleware',]
    DJANGO_CPROFILE_MIDDLEWARE_REQUIRE_STAFF = False

ROOT_URLCONF = 'rinha_de_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'rinha_de_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

def _get_db_backend():
    use_geventpool = bool(int(os.getenv("DB_USE_DB_GEVENTPOOL", "0")))
    if use_geventpool:
        return "django_db_geventpool.backends.postgresql_psycopg2"
    # Backport da versão de desenvolvimento 5.0+
    return "rinha_de_backend.db.backends.postgresql"

def _get_db_options():
    use_geventpool = bool(int(os.getenv("DB_USE_DB_GEVENTPOOL", "0")))
    if use_geventpool:
        return {
            'MAX_CONNS': int(os.getenv("DB_GEVENTPOOL_MAX_CONNS", "23")),
            'REUSE_CONNS': int(os.getenv("DB_GEVENTPOOL_REUSE_CONNS", "23")),
        }
    return {
        # Backport da versão de desenvolvimento 5.0+
        "pool": True,
    }

def _get_db_conn_max_age():
    use_geventpool = bool(int(os.getenv("DB_USE_DB_GEVENTPOOL", "0")))
    if use_geventpool:
        return 0
    return int(os.getenv("DB_CONN_MAX_AGE", 0))

DATABASES = {
    'default': {
        'ENGINE': _get_db_backend(),
        'NAME': os.environ["DB_NAME"],
        'USER': os.environ["DB_USER"],
        'PASSWORD': os.environ["DB_PASSWORD"],
        'HOST': os.environ["DB_HOST"],
        'PORT': os.getenv("DB_PORT", '5432'),
        'CONN_MAX_AGE': _get_db_conn_max_age(),  # Para uso com django_db_geventpool, deve ser 0
        'OPTIONS': {
            "application_name": f"Rinha de Backend [{MY_HOST_NAME}/{os.getpid()}]",
        } | _get_db_options()
    }
}

NUM_INSERT_WORKERS = int(os.getenv("NUM_INSERT_WORKERS", 2))

CACHES = {
    "default": {
        # "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ["CACHE_LOCATION"],
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Fortaleza'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


APPEND_SLASH = False
